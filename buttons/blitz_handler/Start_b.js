const { EmbedBuilder, ButtonBuilder, ActionRowBuilder, ButtonStyle } = require('discord.js');
const fs = require('fs');
const path = require('path');

function getRandomInt(max) {
    return Math.floor(Math.random() * max);
}

rnd = getRandomInt(250)+1;

eventList = 
[   
                "Rien",
                "Puissance x20 pour les personnages masculins",
                "Le personnage avec la plus faible puissance gagne",
                "La puissance de chaque personnage est multipli√©e par son nombre de clefs",
                "La puissance de chaque personnage est divis√©e par son nombre de clefs",
                "Le personnage ajoute √† sa puissance 100x le nombre de clefs du personnage",
                "La puissance de chaque personnage est √©gale √† la somme des chiffres componsant sa valeur",
                "Le combat se jouera avec deux personnages, chacun ajoute √† sa puissance totale celle de son personnage plus celle du personnage " + rnd.toString() + " de son harem",
                "Inverse l'ordre des chiffres composant la puissance de chaque personnage",
                "Le personnage avec l'image la plus tendancieuse : puissance x50",
                "Chaque personnage voit sa puissance multipli√© par 30 s'il n'est pas humain (mi-race accept√©e)",
                "Puissance +250 si le personnage poss√®de une arme sur son image (une arme hein!!)",
                "Le rang like devient la puissance de chaque personnage",
                "Le personnage avec le nom le plus court : puissance x2 (rien si √©galit√©)",
                "La puissance de chaque personnage est multipli√©e par son nombre d'alias (alias custom exclu)",
                "Chaque joueur peut changer ou non de personage apres reveal lors de cette manche, avec un autre de ses personnages encore non jou√©",
                "Si le personnage √† la plus grande puissance n'a pas plus du double du 2nd meilleur personnage de la manche, √©galit√©, et + 1 round √† l'affrontement",
                "Puissance x5 si votre personnage poss√®de 2 fois ou plus le m√™me chiffre dans sa puissance",
                "Puissance : -150 par clef",
                "Puissance x2 si le personnage est rollable dans 2 roulettes",
                "Puissance x10 si le personnage provient du bundle hentai",
                "$divorce le personnage jou√© fait remporter le round (√©galit√© si tous les joueurs le font)",
                "Vous pouvez ajoutez des kakera pour augmenter la puissance de votre personnage pour ce round (1 kkr = 1 puissance). Les joueurs d√©voilent simultan√©ement le montant qu'il souhaite investir, et ce 1 seul fois durant le round",
                "N'importe quel joueur peut √©changer son personnage avec celui dans le harem autre joueur non participant, avant reveal",
                "Puissance x4 si le personnage poss√®de une puissance qui √©quivaut √† un carr√© parfait (ex : puissance = 9¬≤)",
                "R√©duit la puissance du/des personnages adverses de 50x le nombre de clef du personnage jou√©",
                "Au prochain round, puissance de votre personnage multipli√©e par le nombre de clef du personnage jou√© ce tour ci",
                "Les cons√©quences de l'event du prochain round sont doubl√©s",
                "Sur ce round, chaque joueur doit jouer le chiffre le plus √©l√©v√© qu'il lui reste",
                "Le joueur peut invoquer pour l'aider le personnage correspondant √† son nombre jou√© depuis un autre harem non joueur avant le reveal. Les puissances se cumulent et forme la puissance totale du joueur pour ce round",
                "Chaque joueur peut librement incr√©menter ou d√©crementer le nombre d'invocation (-1/0/+1) avant le reveal",
                "Chaque joueur peut inverser librement l'ordre des chiffres composant le nombre d'invocation jou√©",
                "Chaque image (hors cutom) ajoute +20 √† la puissance du personnage jou√©",
                "Puissance x2 si le personnage est √† la fois maculin et f√©minin",
                "Puissance x3 si un autre personnage est pr√©sent sur l'image du personnage",
                "Puissance +250 si le personnage porte des lunettes"
];

module.exports = {
    async execute(interaction) {

        const datapath = path.join(__dirname, "../..").normalize();
        const rawdata = fs.readFileSync(path.join(datapath, "data/server/blitz_info.json"));
        const blitz_info = JSON.parse(rawdata);

        if(!(interaction.customId === 'Start_b')) {
            for (const x of blitzList.get(interaction.guild).keys()) {
                if(interaction.customId.split('|')[1] === x.username) {
                    score = blitzList.get(interaction.guild).get(x) + 1;
                    if(score < blitz_info.score){

                        blitzList.get(interaction.guild).set(x, score);

                        const buttons = new ActionRowBuilder();
                        listS = "";
                        
                        for (const x of blitzList.get(interaction.guild).keys()) {
                            listS += x.username;
                            listS += " " + blitzList.get(interaction.guild).get(x);
                            listS += "\n";
                            buttons.addComponents(
                                new ButtonBuilder()
                                .setStyle(ButtonStyle.Success)
                                .setCustomId('Start_b|' + x.username)
                                .setLabel(x.username)
                                .setEmoji('‚ûï'))
                        }

                        const scoreG1 = new EmbedBuilder()
                                .setColor("eb4034")
                                .setTitle("üî™ Progression du Blitz : ")
                                .setDescription("La tension est palpable...")
                                .addFields( {name: 'Score √† atteindre :', value: blitz_info.score},
                                            {name: 'Rappel mise :', value: blitz_info.mise},
                                            {name: 'Score : ', value: listS},
                                            {name: 'Evenement du round : ', value: eventList[Math.floor(Math.random() * eventList.length)]}
                                            );
    
                        interaction.update({embeds: [scoreG1], components: [buttons]});
                    }
                    else{

                        const logpath = path.join(__dirname, "../..").normalize();
                        const loglog = fs.readFileSync(path.join(logpath, "data/log_info.json"));
                        const loginfo = JSON.parse(loglog);

                        gain = blitz_info.mise * (blitz_info.nbJ - 1);
                        const scoreG1 = new EmbedBuilder()
                            .setColor("eb4034")
                            .setTitle("VICTOIRE")
                            .setDescription("Parmi tous ces harems, seulement un en est ressorti vainqueur !")
                            .setThumbnail("https://i.pinimg.com/736x/92/bd/dd/92bddda156b1b7c6c10304a20c1f2a24.jpg")
                            .addFields( {name: "Gagnant :", value: interaction.customId.split('|')[1]},
                                        {name: "R√©compenses :", value: gain.toString() + "<:kakera:950050987412951051>"});
        
                        const buttons = new ActionRowBuilder()
                            .addComponents(new ButtonBuilder()
                                .setCustomId("GGb|" + interaction.customId.split('|')[1] + "|" + (gain).toString())
                                .setLabel("Obtenir ces gains")
                                .setStyle(ButtonStyle.Success)
                                .setEmoji("üèÜ"))
                            .addComponents(new ButtonBuilder()
                                .setCustomId("Synth_b")
                                .setLabel("Rejouer (et obtenier gain pour " + interaction.customId.split('|')[1] + ")")
                                .setStyle(ButtonStyle.Secondary)
                                .setEmoji("üîÅ"));
                                
                        blitz_info.replay = 1;
                        console.log(blitz_info.replay);
                        fs.writeFile(path.join(datapath, "data/server/blitz_info.json"), JSON.stringify(blitz_info, null, 2), (err) => {
                            if (err) {
                                console.log("Probl√®me lors du chargement des donn√©es dans le fichier blitz_info.json", err);
                                return;
                            }
                            console.log("blitz_info.json  updated");
                        });
                        try {
                            interaction.guild.channels.cache.get(loginfo.id).send('Log : ' + interaction.customId.split('|')[1] + " +" + (gain).toString() + "<:kakera:950050987412951051> " + Date.now());
                        }
                        catch (exception) {
                            console.log(exception)
                        }
                        finally {
                            interaction.reply({embeds: [scoreG1], components: [buttons]});
                        }
                    }
                }
            }
        }
        else
        {
            const buttons = new ActionRowBuilder();
            listS = "";
                        
            for (const x of blitzList.get(interaction.guild).keys()) {
                listS += x.username;
                listS += " " + blitzList.get(interaction.guild).get(x);
                listS += "\n";
                buttons.addComponents(
                    new ButtonBuilder()
                        .setStyle(ButtonStyle.Success)
                        .setCustomId('Start_b|' + x.username)
                        .setLabel(x.username)
                        .setEmoji('‚ûï')
                    ,
                );
            }

            const scoreG1 = new EmbedBuilder()
                .setColor("eb4034")
                .setTitle("üî™ Progression du Blitz : ")
                .setDescription("Premi√®re manche, rien n'est encore jou√© !")
                .addFields( {name: 'Score √† atteindre :', value: blitz_info.score},
                    {name: 'Rappel mise :', value: blitz_info.mise},
                    {name: 'Score : ', value: listS},{name: 'Evenement du round : ', value: eventList[Math.floor(Math.random() * eventList.length)]}
                );
                interaction.update({embeds: [scoreG1], components: [buttons]});
        }
    }
}